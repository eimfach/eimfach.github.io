/meta
author: Robin Gruenke
year: 2020
title: Journal - Tools | robingruenke.com
description: Generate static html flexible, approachable, consistent and with a custom format
keywords: Blog tools python Elm markdown
topic: How my Journal is build

/introduction

For the purpose of starting my blog (I call it journal, because I will write in small chapters), I want to generate static html without a server.
I want a blend of: Clean approach, less boilerplate, simplicity, approachability, content validation, plain text, modularity and freedom for customizing.

/entry
topic: Preface: What about Elm ?
author: Robin Gruenke
date: 07.03.2020
picture: 250px https://images.unsplash.com/photo-1462642109801-4ac2971a3a51?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1866&q=80

Because I am a big fan of Elm, my first thought was if Elm was a good choice for my purpose.
I have a little bit experience with elm-static, which is a tool which is creating static content for your website with elm.
It supports markdown, and elm-markup. 
However, in my humble opinion it is structural very complex, has a lot of boilerplate and the modularity of the markdown files is somehow hard to see through.

What about elm-markup ?

I saw the introduction video of it, and I think it is a very great idea. It is so modular and extensible that you can create very rich
custom formats for your static html. I was looking for it on github, but soon I realized, it is somewhat hard to start off with it, since
there is no real introduction and documentation for it. I would spend a lot of time understanding it and getting things done, so dropped it from the list.
However, maybe I will have a look later this year !

Finally, I was thinking: What would be the elm way of doing it ?

Elm could render static html in a very simple way, by just creating a main function and call the html functions you need.
And it would bring all the power and modularity of elm with it. However, I was quite sure that elm couldn't generate plain html at all.

This is how it looks:

code:
module Test exposing (..)
import Html exposing (Html, div, h1, text)

main : Html Never
main =
    div [] [ h1 [] [ text "Hello World !" ]  ]
:code

Cool, no boilerplate at all in the first place !

When you compile it, you get a html document. However, there is no static html from your main function in it.
It just seems so natural to me that it would generate static html, since the annotation line 'main : Html Never' tells us: 
I will render html without any Javascript Events guaranteed.
Of course, in the end, I was expecting that. As of today, Elm can render html via its Javascript runtime only.

Maybe the addition of a built-in custom type like 'Static' could tell the elm compiler to just render html ? 
It would be just so simple and straight forward :)

Summary:

It seems like that Elm is not the appropriate tool (for now). I could generate pages just the way I mentioned
earlier, however, the whole page would be rendered with javascript, which is not what I want (think of SEO).

/entry
topic: Preface: And what about PHP ?
author: Robin Gruenke
date: 07.03.2020

Yes, good old php. It comes with modular html rendering 'included'. That is what it was made for initially.
I had my experience with it. It is great for starting a small project from scratch and you want to proceed fast.
Until today it grew to has compelling OOP features. However, mixing plain html and php code to have modular html is 
scaling badly, since maintaining readability is clearly not a 'built-in feature', in my opinion. 
It can quickly turn into a complete mess.

In order to get a clean and fitting environment with php, I would need to research for appropriate tools.
But the pool of my concerns are too inconstant.
Do I need some sort of smart classes which handle rendering ?
How could I dismiss writing mixed php and html ?
Do I need some sort of framework ?
Where can I find well written documentation ?
Can I have PHP with a nice syntax ? (Python, you ?)

I am sorry, PHP.

/entry
topic: Indeed Python !
author: Robin Gruenke
date: 07.03.2020
picture: 1000px https://imgs.xkcd.com/comics/python.png

I was learning Python the last weeks. Somehow it catched my attention after years, and I thought: why did I never give it a try ? 
Sorry Python, that I never considered you before ! You are clearly awesome !

Python just runs. It is very approachable and easy to learn.
It has clever and unique idioms, straight forward data structures, 
outstanding libraries for a lot of use cases and on top, a very clean syntax.

It is versatile.

- Do you want to compute complex math with less code ? NumPy got your back.

- Do you want to create a science application ? SciPy got your back.

- Do you want to create interactive code documents ? IPython and Jupyter Notebooks got your back.

- Want to compute math for neural networks on your GPU ? PyTorch has your back, just to mention one.

- Data Science ? Python loves it.

- Web Frameworks ? Django, Flask and more.

Now: What about my need of html modularity and a simple and clean approach ? I would prefer not to write html documents but still be declarative.
I also would prefer not to use some sort of dynamic templating language.

Luckily, Python has my back and I found a really interesting library for my purpose: Yattag.

Yattag code is just plain Python which utilizes the 'with' operator:

code:
from yattag import Doc, indent

doc, tag, text = Doc().tagtext()

with tag('html'):
    with tag('body', id = 'hello'):
        with tag('h1'):
            text('Hello world!')

print(indent(doc.getvalue()))
:code

Result:

code:
<html>
  <body id="hello">
    <h1>Hello world!</h1>
  </body>
</html>
:code

This way I could write my whole site in pure python.
Clean, modular and declarative html generation there you go !