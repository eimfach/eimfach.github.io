/meta
author: Robin Gruenke
year: 2020
title: Journal - Tools | robingruenke.com
description: Generate static html flexible, approachable, consistent and with a custom format
keywords: journal generate html python elm
topic: How my Journal is build

/introduction

For the purpose of starting my blog (I call it journal, because I will write in small chapters), I want to generate static html without a server.
I want a blend of: Clean approach, less boilerplate, simplicity, approachability, content validation, plain text, modularity and freedom for customizing.

/entry
topic: Preface: What about Elm ?
author: Robin Gruenke
date: 07.03.2020
appendix: [What is Elm ?] https://en.wikipedia.org/wiki/Elm_(programming_language)
picture: 250px https://images.unsplash.com/photo-1462642109801-4ac2971a3a51?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1866&q=80

Because I am a big fan of Elm, my first thought was if it was a good choice for my purpose.
I have a little bit experience with elm-static, which is a opinionated tool for creating static html for your website.
It supports markdown and elm-markup. 
However, in my humble opinion it is structural very complex, has a lot of boilerplate and the modularity of the markdown files is somehow hard to see through.

What about elm-markup ?

I saw the introduction video of it, and I think it is a very great idea. It is so modular and extensible that you can create very rich
custom formats for your static html. I was looking for it on github, but soon I realized, it is somewhat hard to start off with it, since
there is no real introduction and documentation for it. I would spend a lot of time understanding it and getting things done, so dropped it from the list.
However, maybe I will have a look later this year !

Finally, I was thinking: What would be the elm way of doing it ?

Elm could render static html in a very simple way, by just creating a main function and call the html functions you need.
And it would bring all the power and modularity of elm with it. However, I was quite sure that the compiler couldn't generate plain html at all.

This is how it looks:

code:
module Test exposing (..)
import Html exposing (Html, div, h1, text)

main : Html Never
main =
    div [] [ h1 [] [ text "Hello World !" ]  ]
:code

Cool, no boilerplate at all in the first place !

When you compile it, you get a html document. However, there is no static html from your main function in it.
It just seems so natural to me that it would generate static html, since the annotation line 'main : Html Never' tells us: 
I will render html without any Javascript Events guaranteed.
Of course, in the end, I was expecting that. As of today, Elm can render html via its Javascript runtime only (It is a compile to js language).

Maybe the addition of a built-in custom type like 'Static' could tell the compiler to just render html ? 
It would be just so simple and straight forward :)

Summary:

It seems like that Elm is not the appropriate tool (for now). I could generate pages just the way I mentioned
earlier, however, the whole page would be rendered with javascript, which is not what I want (think of SEO).

/entry
topic: Preface: And what about PHP ?
author: Robin Gruenke
date: 07.03.2020

Yes, good old php. It comes with modular html rendering 'included'. That is what it was made for initially.
I had my experience with it. It is great for starting a small project from scratch and you want to proceed fast.
Until today it grew to has compelling OOP features. However, mixing plain html and php code to have modular html is 
scaling badly, since maintaining readability is clearly not a 'built-in feature', in my opinion. 
It can quickly turn into a complete mess.

In order to get a clean and fitting environment with php, I would need to research for appropriate tools.
But the pool of my concerns are too inconstant.
Do I need some sort of smart classes which handle rendering ?
How could I dismiss writing mixed php and html ?
Do I need some sort of framework ?
Where can I find well written documentation ?
Can I have PHP with a nice syntax ? (Python, you ?)

I am sorry, PHP.

/entry
topic: Indeed Python !
author: Robin Gruenke
date: 07.03.2020
picture: 1000px https://imgs.xkcd.com/comics/python.png
appendix: [Documentation for Yattag] https://www.yattag.org

I was learning Python the last weeks. Somehow it catched my attention after years, and I thought: why did I never give it a try ? 
Sorry Python, that I never considered you before ! You are clearly awesome !

Python just runs. It is very approachable and easy to learn.
It has clever and unique idioms, straight forward data structures, 
outstanding libraries for a lot of use cases and on top, a very clean syntax.

It is versatile.

- Do you want to compute complex math with less code ? NumPy got your back.

- Do you want to create a science application ? SciPy got your back.

- Do you want to create interactive code documents ? IPython and Jupyter Notebooks got your back.

- Want to compute math for neural networks on your GPU ? PyTorch has your back, just to mention one.

- Data Science ? Python loves it.

- Web Frameworks ? Django, Flask and more.

Now: What about my need of html modularity and a simple and clean approach ? I would prefer not to write html documents but still be declarative.
I also would prefer not to use some sort of dynamic template language.

Luckily, Python has my back and I found a really interesting library for my purpose: Yattag.

Yattag code is just plain Python which utilizes the 'with' operator:

code:
from yattag import Doc, indent

doc, tag, text = Doc().tagtext()

with tag('html'):
    with tag('body', id = 'hello'):
        with tag('h1'):
            text('Hello world!')

print(indent(doc.getvalue()))
:code

Result:

code:
<html>
  <body id="hello">
    <h1>Hello world!</h1>
  </body>
</html>
:code

This way I could write my whole site in pure python.
Clean, modular and declarative html generation there you go !

/entry
topic: Still, I want to write my articles in plain text !
author: Robin Gruenke
date: 08.03.2020

Okay, okay. Yes, I would still need to build rather complex and repetitive stacks of 'pythonic html' for each page. Reusability or not.
Of course I will build up functions which resemble html components, that would be the modular part. But that is not sufficient.

To recapture:

I want a blend of: Clean approach, less boilerplate, simplicity, approachability, content validation, plain text, modularity and freedom for customizing.

So what would be basically missing is content validation and plain text. 
I could extend my pythonic html with validator functions, to get the validation I need, or create a validation layer between the parsing and the rendering.
But before all that, I want to write my articles in plain text.

So I finally decided to create my own markup document format, which resembles a Journal Page with all its specific layout and styling.

I want to write a parser that parses the document,
validates for SEO best practices and enforces semantics in content
(like a requirement for an introduction text, max length of content elements, required meta data or keyword occurrence). The reason I want to combine
parsing and content validation is, so that I can reuse it for another project. Content semantics would be a feature of the document format.

Each Page shall have the exact same structure and basic elements, so creating an abstract format,
while letting python handle the parsing, while letting the parsing handle the content validation, 
while letting yattag assemble the html from the parsing results, would be a nice separation of concerns. Phew !

As an aside, you can see (maybe you were thinking about it already), the very known markdown format would not be enough for this.

/entry
topic: How does the format look like ?
author: Robin Gruenke
date: 09.03.2020
picture: 1000px /img/journal-markup-example.png
appendix: [Implementation of the Parser] https://github.com/eimfach/eimfach.github.io/blob/robingruenke.com/journal.py


At first I describe the meta data for the document:

code:
/meta
author: Robin Gruenke
year: 2020
title: Journal - Tools | robingruenke.com
description: Generate static html flexible, approachable, consistent and with a custom format
keywords: journal generate html python elm
topic: How my Journal is build
:code

- Semantic blocks are annotated with a slash like /meta

- The meta properties are expected in this exact order, in those exact lines, to enforce consistency across multiple pages.

- author: Requires exactly two latin character words separated by a space. This author is the owner of the journal topic.
Any following author properties are just so that multiple authors can write on a single document. Like for guest chapters.

- year: Requires a four digit year.

- title: Requires three words with the given special characters and spaces

- description: Requires exactly 50 to 160 characters

- keywords: Requires exactly 5 latin words

- topic: Can be any characters up to a length of 50 characters

Then there is the /introduction block. It is required to have it in the document including the following plain text, which must be between 50 and 300 characters, not counting spaces.

For every chapter there is an /entry block. It also requires to set at least topic, author and a date. The date is in german format (dd.mm.yyyy).
Optionally you can set a picture, which consists of two space separated values: a (css compatible)
height value and the link itself. Then there is the plain text for the entry, it is just free texting, with unlimited paragraphs.
Just separate them by two new lines. They will be wrapped in p tags later on. Plus, leading dash characters are auto magically, fancily transformed into a unicode dot character.

And that's basically it.

Ah no, not to forget, there are these code blocks on this page which looks like this: (I had to escape them, a code block starts with code: and ends with :code)

code:
\code:
<html>
  <body id="hello">
    <h1>Hello world!</h1>
  </body>
</html>
\:code
:code

Code blocks may only occur in entry blocks in between paragraphs.

- Finally, a single line of at least three dashes (---) stops the parsing. It has come to an area in the document, which is just for happily and freely drafting around :)

What I want to add further: Primarily hyperlinks which occur as an appendix to a chapter, annotations in the plain text like inline hyperlinks and maybe some emphasizing stuff.
I am not too much of a fan of bold or underlined words in texts, however. I think it is distracting from the content.
Maybe some italic stuff. I like Italy !

Also, some small uncritical parser bugs have to be fixed.

-----------------------------------

/entry
topic: Further Ideas
author: Robin Gruenke
date: 09.03.2020

- Checkboxes ?
- Content emphasizing settings for each user


/entry
topic: Honorable Mentions
author: Robin Gruenke
date: 10.03.2020

- What about node.js ?